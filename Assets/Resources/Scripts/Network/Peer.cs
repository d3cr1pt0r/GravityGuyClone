// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine.Networking;

public class Peer
{
	public event NetworkEvent onConnected;
	public delegate void NetworkEvent(Peer p, int connId);

	public bool socketAlive;

	private int hostId;
	private HostTopology hostTopology;
	private int recHostId;
	private int connectionId;
	private int channelId;
	private int dataSize;
	private byte[] buffer;
	private byte error;
	
	public Peer (int port) {
		buffer = new byte[1024];
		socketAlive = createSocket(port);
	}
	
	public void GetNetworkEvent() {
		NetworkEventType recData = NetworkTransport.Receive (out recHostId, out connectionId, out channelId, buffer, 1024, out dataSize, out error);
		
		switch(recData) {
		case NetworkEventType.Nothing:
			break;
		case NetworkEventType.ConnectEvent:
			break;
		case NetworkEventType.DisconnectEvent:
			break;
		case NetworkEventType.DataEvent:
			string data = System.Text.Encoding.ASCII.GetString (buffer);
			break;
		case NetworkEventType.BroadcastEvent:
			break;
		default:
			break;
		}
	}

	bool createSocket(int port) {
		// start server
		initNetworkConfig();
		
		hostId = NetworkTransport.AddHost (hostTopology, port);
		return hostId != -1;
	}

	public void sendString(string str, int channelId = 1) {
		byte error;
		byte[] buffer = System.Text.Encoding.ASCII.GetBytes (str);
		NetworkTransport.Send(hostId, connectionId, channelId, buffer, buffer.Length, out error);
	}

	public bool connectSocket(string address, int port) {
		// Connect to host
		byte error;
		connectionId = NetworkTransport.Connect (hostId, address, port, 0, out error);

		if (error == (byte)NetworkError.Ok) {
			onConnected(this, connectionId); 
			return true;
		} else {
			return false;
		}
	}

	void initNetworkConfig() {
		// Create global config
		GlobalConfig globalConfig = new GlobalConfig ();
		globalConfig.ReactorModel = ReactorModel.FixRateReactor;
		globalConfig.ThreadAwakeTimeout = 1;
		
		// Create connection config
		ConnectionConfig connectionConfig = new ConnectionConfig ();
		byte channelReliable = connectionConfig.AddChannel (QosType.Reliable);
		byte channelUnreliable = connectionConfig.AddChannel (QosType.Unreliable);
		
		// Create host config
		hostTopology = new HostTopology (connectionConfig, 10);
		
		// Init network
		NetworkTransport.Init (globalConfig);
	}


}

